name: macOS

# Controls when the action will run. 
on: [push, pull_request]

jobs:
  # Build & upload dylib files
  macos-build:
    name: Build (MacOS) (BETA)
    runs-on: macos-latest
    
    # Build 3 dylib files with with different intrinsics
    strategy:
      matrix:
        intrinsic:
          - "sse2"
          - "avx"
          - "avx2"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2.3.4
    
      # Set latest major XCode version
    - name: Set XCode 12
      run: sudo xcode-select -s /Applications/Xcode_12.app/Contents/Developer
      
    - name: Install dependencies
      run: |
        brew update
        brew install sdl2
      
    - name: Configure CMake
      run: mkdir Release && cd Release && cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_CXX_FLAGS=-m${{ matrix.intrinsic }} -D CMAKE_C_COMPILER=clang ..
      
    - name: Build
      run: cd Release && make -j $(sysctl -n hw.ncpu)
      
      # Move dylib to separate folder
    - name: Prepare to upload
      run: mkdir ready && cp Release/libGOESP.dylib ready/libGOESP_${{ matrix.intrinsic }}.dylib && rm -rf Release
      
      # Calculate SHA1 for dylib
    - name: SHA1
      working-directory: ready
      run: |
        shasum libGOESP_${{ matrix.intrinsic }}.dylib > libGOESP_${{ matrix.intrinsic }}.dylib.sha1
        head -c 40 libGOESP_${{ matrix.intrinsic }}.dylib.sha1
      
      # Upload dylib and sha1 sum to artifacts
    - name: Upload (${{ matrix.intrinsic }}) (BETA)
      uses: actions/upload-artifact@v2.2.3
      with:
        name: GOESP BETA macOS (${{ matrix.intrinsic }})
        path: ready/*

  # Upload dylib files in one archive
  macos-upload-all:
    needs: macos-build
    name: Upload All (macOS) (BETA)
    runs-on: macos-latest
    
    steps:
    # Redownload earlier uploaded dylib and sha1 files (SSE2)
    - name: Download (sse2)
      uses: actions/download-artifact@v2.0.9
      with:
        name: GOESP BETA macOS (sse2)
      
    # Redownload earlier uploaded dylib and sha1 files (AVX)
    - name: Download (avx)
      uses: actions/download-artifact@v2.0.9
      with:
        name: GOESP BETA macOS (avx)
      
    # Redownload earlier uploaded dylib and sha1 files (AVX2)
    - name: Download (avx2)
      uses: actions/download-artifact@v2.0.9
      with:
        name: GOESP BETA macOS (avx2)
      
    # Prepare dylib files to upload (just rename it and recalculate SHA1 to compare)
    - name: Prepare to upload
      run: |
        mkdir ready
        cp libGOESP_sse2.dylib ready/libGOESP_SSE2_BETA.dylib
        cp libGOESP_avx.dylib ready/libGOESP_AVX_BETA.dylib
        cp libGOESP_avx2.dylib ready/libGOESP_AVX2_BETA.dylib
        cd ready
        shasum libGOESP_SSE2_BETA.dylib > libGOESP_SSE2_BETA.dylib.sha1
        shasum libGOESP_AVX_BETA.dylib > libGOESP_AVX_BETA.dylib.sha1
        shasum libGOESP_AVX2_BETA.dylib > libGOESP_AVX2_BETA.dylib.sha1
      
    # Recheck SHA1 sum and compare it (why not?)
    - name: Check SHA1 match
      run: |
        exitCode=0
        echo "libGOESP_SSE2_BETA.dylib SHA1 hash is:"
        if [[ $(head -c 40 libGOESP_sse2.dylib.sha1) != $(head -c 40 ready/libGOESP_SSE2_BETA.dylib.sha1) ]]; then echo "NOT Equal"; let "exitCode++"; else echo Equal; fi
        echo "libGOESP_AVX_BETA.dylib SHA1 hash is:"
        if [[ $(head -c 40 libGOESP_avx.dylib.sha1) != $(head -c 40 ready/libGOESP_AVX_BETA.dylib.sha1) ]]; then echo "NOT Equal"; let "exitCode++"; else echo Equal; fi
        echo "libGOESP_AVX2_BETA.dylib SHA1 hash is:"
        if [[ $(head -c 40 libGOESP_avx2.dylib.sha1) != $(head -c 40 ready/libGOESP_AVX2_BETA.dylib.sha1) ]]; then echo "NOT Equal"; let "exitCode++"; else echo Equal; fi
        exit $exitCode
      
    # Reupload it as one archive
    - name: Upload All (BETA)
      uses: actions/upload-artifact@v2.2.3
      with:
        name: GOESP BETA macOS All
        path: ready/*
